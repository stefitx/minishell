
🐚🐢MINISHELL PROJECT MANAGEMENT🐌🐣

Hi there Pablo!

We will be using this .txt file to communicate the changes and progress made in the project, so we have a documentation in time of everything we are doing.

We will be putting the date of changes made, the name of person applying the changes, and we will be describing the changes done.

The code itself should also have some simple comments accompanying the functions in order to be able to understand it better.

I have outlined the points of the subject, in order to be able to divide the tasks, but further comments and details should be added by each of us as we go.

emoji :

- 🌸 = task finished by Stefi;
- 👩🏻‍💻 = task in progress by Stefi;
- 💍 = task will be done by Stefi;

-  🎯 = task finished by Pablo;
-  ⚔️ = task in progress by Pablo;
-  🔫 = task will be done by Pablo;

--------------------------------------------------------------------------------------------------------------------

For initial execution:


- when you execute bash with another argument after (e.g. bash cat) it will try to execute the second argument. 

***Pipex can solve this.

- when you execute ./minishell, the program mmust display a prompt, just like in bash.

NO NEED TO INTERPRET \ (backslash) OR ; (semicolon)!

- working history
{
	asdfghjkl, i would suppose it has to do with having a log of all commands used?
}

🔫- command parsing and execution
{
	- must use readline and affiliated functions to read user input;
	- must parse input char by char, then split it accordingly;
		*** the split must handle ' (single quotes) and " (double quotes) ***
	- must then execute the parsed commands by executing built-ins or external programs
}

💍- built-ins
{
	- echo -n = suppress the newline added by the echo command;
	- cd = change directory with either a relative or an absolute path;
	- pwd = print working directory (prints the absolute path to the diirectory we are in);
	- export = shows set environment variables;
	- env = displays the current environment;
	- exit = exits the shell;
}

- redirections and pipes
{
	- < = takes input from a file;
	- > = writes output to a file;
	- >> = appends output to a file;
	- >> = has to be given a delimiter, reads stdin until delimiter is seen (here_doc bonus from pipex) DOES NOT UPDATE HISTORY;
	- | (Pipe) = connect output of one command to input of another;
}

- environment variables and exit status
{
	- $ = when followed by variable name, expands said variable, executing the previous command (e.g. echo $PWD);
	- $? = holds the exit status of the last executed command, executes previous command on it (e.g. echo $?);
}

- signal handling
{
	- ctrl-C = interrupts current process, displays a new line;
	- ctrl-D = exits the shell;
	- ctrl-\ = does nothing;
}

- bonus part
{
	- && = (logical AND) Usage: "command1 && command2" -> executes the second command only if the first command succeeds;
	- || = (logical OR) Usage: "command1 || command2" -> executes the second command only if the first command fails;
	- * (wildcards) = matches zero or more characters and can be used to match multiple files or directories with similar names
		- e.g.: "*.txt" matches all files with a .txt extension in the current directory, potentially applying commands to all of them
}

--------------------------------------------------------------------------------------------------------------------

01/02/2024 - Stefi 

{
	
}

--------------------------------------------------------------------------------------------------------------------

